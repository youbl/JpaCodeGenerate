<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta content="text/html; charset=utf-8" http-equiv="Content-Type"/>
    <title>{{low_entity_name}}列表</title>
    <script src="../res/common.js?flg=1" type="text/javascript"></script>
    <script src="../res/vue.min.js" type="text/javascript"></script>
    <script src="../res/axios.min.js" type="text/javascript"></script>
    <script src="../res/elemeIndex.js" type="text/javascript"></script>
    <link href="../res/elemeIndex.css" rel="stylesheet">
</head>
<body>
<h1>
1、请修改页面上面的script和link的src，确保引用正确；<br>
2、请确认common.js文件里定义的$$BASE_URL 根路径是正确的。
</h1>
<div id="divApp" style="text-align: center;width: 98%;">
    <el-form :inline="true" class="demo-form-inline" style="text-align: left">
{{html_search_content}}
        <el-form-item>
            <el-button @click="loadDatas()" type="primary" size="mini">查询</el-button>
            <el-button :disabled="!dataList.length" icon="el-icon-download" @click="exportToCsv" size="mini">导出CSV
            </el-button>
            {{start-modify_content}}
            <el-button @click="openEditDialog()" type="primary" size="mini">新建</el-button>
            {{end-modify_content}}
            <el-button @click="location.reload()" type="primary" size="mini">刷新</el-button>
            <span style="color:blue">{{statusTxt}}</span>
        </el-form-item>
    </el-form>

    <el-table
            v-loading="loading"
            element-loading-text="拼命加载中"
            element-loading-spinner="el-icon-loading"
            element-loading-background="rgba(0, 0, 0, 0.8)"
            :data="dataList"
            height="950"
            border
            stripe
            @selection-change="handleSelectionChange"
            style="width: 100%">
        <el-table-column type="selection" width="55"></el-table-column>
{{html_table_content}}
        {{start-modify_content}}
        <el-table-column label="操作" width="200">
            <template slot-scope="scope">
                <a href="javascript:void(0)" @click="openEditDialog(scope.row, false)">修改</a>
                |
                <a href="javascript:void(0)" @click="openEditDialog(scope.row, true)">复制</a>
                |
                <a href="javascript:void(0)" @click="confirmDel(scope.row)">删除</a>
            </template>
        </el-table-column>
        {{end-modify_content}}
    </el-table>
{{start-modify_content}}
    <!-- 编辑窗口 -->
    <el-dialog :visible.sync="statusEditDialog" :title="(editRow.{{low_key_field}}?'编辑界面':'新增界面')">
        <el-form size="mini" :model="editRow" ref="editRowForm" style="width:700px">
{{html_edit_content}}
        </el-form>
        <div class="dialog-footer" slot="footer">
            <span v-if="editRow.{{low_key_field}}" style="font-size: 12px;color: blue;">更新主键:{{editRow.{{low_key_field}}}}</span>
            <el-button @click="saveData('editRowForm')" icon="el-icon-success" type="primary">
                {{(editRow.{{low_key_field}}?'更新数据':'新增数据')}}
            </el-button>
            <el-button @click="hideEditDialog">取 消</el-button>
        </div>
    </el-dialog>
{{end-modify_content}}
    <hr>
    <div>build by @author youbl.blog.csdn.net @since {{date_time}}</div>
</div>
<script type="text/javascript">
    const vueApp = new Vue({
        el: '#divApp',
        data: function () {
            return {
                tableFields: [{{html_fields}}],
                statusTxt: '',
                loading: false,

                searchCondition: {},
                dataList: [],
{{start-modify_content}}
                statusEditDialog: false,
                editRow: {},
{{end-modify_content}}
                multipleSelection: [],
            }
        },
        mounted: function () {
            this.searchCondition['{{low_key_field}}'] = getQueryString('id');
            this.loadDatas();
        },
        computed: {},
        methods: {
            handleSelectionChange: function (val) {
                this.multipleSelection = val;
            },
            getAllSelectedId: function () {
                if (this.multipleSelection.length <= 0) {
                    alert('请选择要处理的数据');
                    return [];
                }
                if (!confirm('确认要继续吗？')) {
                    return [];
                }
                let ret = [];
                for (let i = 0, j = this.multipleSelection.length; i < j; i++) {
                    ret.push(this.multipleSelection[i].{{low_key_field}});
                }
                return ret;
            },
            loadDatas: function () {
                if (this.loading)
                    return alert('加载中...');
                this.loading = true;
                let startTime = new Date();

                for (let att in this.searchCondition) {
                    if (this.searchCondition[att] === '') {
                        delete (this.searchCondition[att]);
                    }
                }

                this.dataList = [];
                let url = $$BASE_URL + '{{low_entity_name}}/all';
                let para = {'params': this.searchCondition};
                return axios.post(url, para).then(response => {
                    this.loading = false;
                    if (!response.data || response.data.code !== 0) {
                        return alert('获取数据列表失败:' + getErrorMsg(response));
                    }
                    let data = response.data.data;
                    if (!data || data.length === undefined) {
                        return alert('获取数据失败:' + getErrorMsg(response));
                    }
                    if (data.length === 0) {
                        return alert('未找到数据');
                    }
                    this.dataList = data;
                    this.statusTxt = this.dataList.length + '行，耗时:' + ((new Date()) - startTime) + 'ms';
                }).catch(error => this.ajaxError(error));
            },
{{start-modify_content}}
            confirmDel: function (row) {
                if (!confirm('确认要删除吗?')) {
                    return;
                }
                let url = $$BASE_URL + '{{low_entity_name}}?{{low_key_field}}=' + row.{{low_key_field}};
                // post和put的第二个参数直接为data，第三个参数为config，而delete的第二个参数是config，所以要把data放在config里
                return axios.delete(url, {data: row}).then(response => {
                    if (!response.data || response.data.code !== 0) {
                        return alert('删除失败:' + getErrorMsg(response));
                    }
                    alert('删除成功');
                    location.reload();
                }).catch(error => this.ajaxError(error));
            },
            openEditDialog: function (row, isClone) {
                if (row) {
                    if (isClone) {
                        this.editRow = {...row};
                        Vue.set(this.editRow, '{{low_key_field}}', '');
                    } else {
                        this.editRow = row;
                    }
                } else {
                    this.editRow = {};
                    for (let i = 0, j = this.tableFields.length; i < j; i++) {
                        Vue.set(this.editRow, this.tableFields[i], '');
                    }
                }
                this.statusEditDialog = true;
            },
            hideEditDialog: function () {
                this.statusEditDialog = false;
            },
            saveData: function (form) {
                this.$refs[form].validate(valid => {
                    if (!valid)
                        return false;

                    let url = $$BASE_URL + '{{low_entity_name}}';
                    let httpMethod = this.editRow.{{low_key_field}} ? axios.put : axios.post;
                    return httpMethod(url, this.editRow).then(response => {
                        if (!response.data || response.data.code !== 0) {
                            return alert('保存失败:' + getErrorMsg(response));
                        }
                        let data = response.data.data;
                        // data是主键
                        if (!data || parseInt(data, 10) <= 0) {
                            return alert('保存失败:' + getErrorMsg(response));
                        }
                        alert('保存成功');
                        location.reload();
                    }).catch(error => this.ajaxError(error));
                });
            },
{{end-modify_content}}
            // 自适应表格列宽
            flexColumnWidth: function (str, tableData, flag = 'max', charWidth = 12, miniWidth = 50) {
                // str为该列的字段名(传字符串);tableData为该表格的数据源(传变量);
                // flag为可选值，可不传该参数,传参时可选'max'或'equal',默认为'max'
                // flag为'max'则设置列宽适配该列中最长的内容,flag为'equal'则设置列宽适配该列中第一行内容的长度。
                str = str + '';
                if (str.length === 0)
                    return '0';

                let columnContent = '';
                if (flag === 'equal') {
                    // 获取该列中第一个不为空的数据(内容)
                    for (let i = 0, j = tableData.length; i < j; i++) {
                        columnContent = tableData[i][str] + '';
                        if (columnContent.length > 0) {
                            break;
                        }
                    }
                } else {
                    // 获取该列中最长的数据(内容)
                    for (let i = 0, j = tableData.length; i < j; i++) {
                        let tmp = tableData[i][str] + '';
                        if (tmp.length > columnContent.length) {
                            columnContent = tmp;
                        }
                    }
                }
                // 跟标题比对
                if (columnContent.length < str.length)
                    columnContent = str;
                //console.log('该列数据:' + str + ':' + columnContent)

                // 以下分配的单位长度可根据实际需求进行调整
                let flexWidth = 0;
                for (const char of columnContent) {
                    let useChWidth = charWidth;
                    if (char >= '\u4e00' && char <= '\u9fa5') {
                        // 中文字符分配宽度
                        useChWidth = useChWidth * 2 - 1;
                    }
                    flexWidth += useChWidth;
                }
                if (flexWidth < miniWidth) {
                    // 设置最小宽度
                    flexWidth = miniWidth;
                }
                //console.log('该列宽度:' + str + ':' + flexWidth)
                return flexWidth + 'px';
            },
            exportToCsv: function () {
                window.exportDataToCsv(this.dataList);
            },

            goLogin: function () {
                top.location.href = $$BASE_URL + 'login.html?url=' + encodeURIComponent(location.href);
            },
            ajaxError: function (error) {
                window.ajaxError(error, vueApp);
            },
        },
    });
</script>
</body>
</html>