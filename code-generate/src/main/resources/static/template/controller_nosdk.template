package {{package_name}}.controller;

import {{response_package_name}}.ResponseData;
import {{package_name}}.dto.{{entity_name}}Dto;
import {{package_name}}.service.{{entity_name}}Service;
import lombok.NonNull;
import lombok.RequiredArgsConstructor;
import org.springframework.util.Assert;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

/**
 *
 * @author youbl.blog.csdn.net
 * @since {{date_time}}
 */
@RestController
@RequiredArgsConstructor
public class {{entity_name}}Controller {
    private final {{entity_name}}Service service;

    @PostMapping("/{{low_entity_name}}/all")
    public ResponseData<List<{{entity_name}}Dto>> findAll(@RequestBody {{entity_name}}Dto dto) {
        return ResponseData.ok(service.search(dto));
    }

    @GetMapping("/{{low_entity_name}}")
    public ResponseData<{{entity_name}}Dto> findById(@NonNull {{primary_key_type}} {{low_key_field}}) {
        return ResponseData.ok(service.findById({{low_key_field}}));
    }

{{start-modify_content}}
    @DeleteMapping("/{{low_entity_name}}")
    // @OperationLog(subType = SubType.{{upall_entity_name}}_DEL)
    public ResponseData<Boolean> delById(@NonNull {{primary_key_type}} {{low_key_field}}) {
        return ResponseData.ok(service.removeById({{low_key_field}}));
    }

    @PutMapping("/{{low_entity_name}}")
    // @OperationLog(subType = SubType.{{upall_entity_name}}_UPDATE)
    public ResponseData<{{primary_key_type}}> updateById(@RequestBody @NonNull {{entity_name}}Dto dto) {
        Assert.notNull(dto.get{{up_key_field}}(), "update must set primary key.");
        {{primary_key_type}} newId = service.save{{entity_name}}(dto);
        return ResponseData.ok(newId);
    }

    @PostMapping("/{{low_entity_name}}")
    // @OperationLog(subType = SubType.{{upall_entity_name}}_ADD)
    public ResponseData<{{primary_key_type}}> insert(@RequestBody @NonNull {{entity_name}}Dto dto) {
        // clear primary key before insert
        dto.set{{up_key_field}}(null);

        {{primary_key_type}} newId = service.save{{entity_name}}(dto);
        dto.set{{up_key_field}}(newId);
        return ResponseData.ok(newId);
    }
{{end-modify_content}}
}