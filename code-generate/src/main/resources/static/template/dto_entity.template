package {{package_name}}.mapstruct;

import {{package_name}}.dao.entity.{{entity_name}};
import {{package_name}}.dto.{{entity_name}}Dto;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.Named;
import org.mapstruct.factory.Mappers;

import java.sql.Timestamp;
import java.time.Instant;
import java.time.LocalDateTime;
import java.util.List;

/**
 * need add these dependency, and compile with maven:
 * <dependency><groupId>org.mapstruct</groupId><artifactId>mapstruct</artifactId></dependency>
 * <dependency><groupId>org.mapstruct</groupId><artifactId>mapstruct-processor</artifactId></dependency>
 *
 * @author youbl.blog.csdn.net
 * @since {{date_time}}
 */
@Mapper
public interface {{entity_name}}EntityMapper {
    {{entity_name}}EntityMapper INSTANCE = Mappers.getMapper({{entity_name}}EntityMapper.class);

    {{dto_timestamp_to_localdatetime}}
    {{entity_name}} dto2entity({{entity_name}}Dto dto);

    {{dto_localdatetime_to_timestamp}}
    @Mapping(target = "rowLimit",  ignore = true)
    {{entity_name}}Dto entity2dto({{entity_name}} entity);

    List<{{entity_name}}> dto2entity(List<{{entity_name}}Dto> dto);

    List<{{entity_name}}Dto> entity2dto(List<{{entity_name}}> entity);

    @Named("mapTime")
    default LocalDateTime mapTime(Long millisTs) {
        if (millisTs != null) {
            return Timestamp.from(Instant.ofEpochMilli(millisTs)).toLocalDateTime();
        }
        return null;
    }

    // convert to millis timestamp
    @Named("mapTimestamp")
    default Long mapTimestamp(LocalDateTime value) {
        if (value != null) {
            return Timestamp.valueOf(value).getTime();
        }
        return null;
    }
}